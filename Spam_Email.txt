import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
import warnings

warnings.filterwarnings('ignore')

# Load data from a CSV file
file_path = "C:/Users/Sanika/Downloads/archive (1)/spam.csv"
data = pd.read_csv(file_path, encoding='latin1')

# Display the first few rows of the dataset
print("Dataset Head:")
print(data.head())

# Visualization: Class distribution
plt.figure(figsize=(6, 4))
sns.countplot(x='v1', data=data)
plt.title("Distribution of Target Variable (v1)")
plt.xlabel("Spam or Not Spam")
plt.ylabel("Count")
plt.show()

# Preprocessing
# Map target column 'v1' to numeric (spam=1, ham=0)
X = data.drop(columns=['v1'])
y = data['v1']

# visualation the distribution of numerical features
if X.select_dtypes(include=['number']).shape[1] > 0:
    X.select_dtypes(inlude=['number']).hist(figsize=(10,6),bins=20)
    plt.suptitle("NUmerical Feature Distributions ")
    plt.show()

# Convert categorical variables to numeric (if any)
if X.select_dtypes(include=['object']).shape[1] > 0:
    X = pd.get_dummies(X)

# Handle missing values
X.fillna(X.median(numeric_only=True), inplace=True)

# Correlation heatmap (if features are numeric)
if X.shape[1] > 1:  # Avoid heatmap if there's only one feature
    plt.figure(figsize=(10, 8))
    sns.heatmap(X.corr(), annot=True, cmap='coolwarm', fmt=".2f", square=True)
    plt.title("Feature Correlation Heatmap")
    plt.show()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a logistic regression model
log_reg = LogisticRegression(max_iter=1000, random_state=42)

# Train the model
log_reg.fit(X_train, y_train)

# Make predictions
y_pred = log_reg.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

classification_rep = classification_report(y_test, y_pred)
print("Classification Report:")
print(classification_rep)

# Confusion matrix visualization
conf_matrix = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues', xticklabels=[0, 1], yticklabels=[0, 1])
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()

 
